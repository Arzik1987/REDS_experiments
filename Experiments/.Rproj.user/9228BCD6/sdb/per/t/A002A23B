{
    "collab_server" : "",
    "contents" : "#### install batchtools if necessary\n\nlist.of.packages <- c(\"batchtools\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n\nlibrary(primre)\nlibrary(batchtools)\n\n#### if you did something wrong and want to redo everything from scratch\n\n# reg <- loadRegistry(file.dir = paste0(getwd(), \"/registry\"), work.dir = getwd(), writeable = TRUE)\n# removeRegistry(reg = reg)\n\n#### for the first start of this code you need to make a registry, where the results will reside\n\nreg = makeExperimentRegistry(file.dir = paste0(getwd(), \"/registry\"), packages = \"primre\", seed = 1)\n\n#### for subsequent uses of the code, when the registry exists\n\n# reg <- loadRegistry(file.dir = paste0(getwd(), \"/registry\"), work.dir = getwd(), writeable = TRUE)\n\n### if you want to remove experimental results, but keep the registry\n\n# reg <- loadRegistry(file.dir = paste0(getwd(), \"/registry\"), work.dir = getwd(), writeable = TRUE)\n# clearRegistry(reg = getDefaultRegistry())\n\n#### parallelize\n\nreg$cluster.functions = makeClusterFunctionsSocket()\nsaveRegistry()\n\n#### data\n\nsyntdata <- function(data, job, npts, dgp, ...){\n  train <- get.labs.box(n.points = npts, dgp = dgp,...)\n  test <- get.labs.box(n.points = 10000, dgp = dgp,...)\n  dim <- ncol(train[[1]]) \n  box <- matrix(c(rep(0, dim), rep(1, dim)), nrow = 2, byrow = TRUE)\n  list(train = train, test = test, box = box)\n}\n\nsimdata <- function(data, job, ind, noise, npts, ...){\n  temp <- data[[1]][(npts*(ind - 1) + 1):(npts*ind),]\n  train <- test <- list()\n  \n  train[[1]] <- temp[, 1:12]\n  train[[2]] <- temp[, 13]\n  \n  if(noise > 0){\n    inds <- sample(1:length(train[[2]]), floor(length(train[[2]])*noise))\n    train[[2]][inds] <- 1 - train[[2]][inds]\n  }\n  \n  test[[1]] <- data[[2]][, 1:12]\n  test[[2]] <- data[[2]][, 13]\n  \n  box <- matrix(c(0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 0.05, 0.05, 0.05, 0.05,\n                  5, 5, 5, 5, 4, 4, 4, 4, 1, 1, 1, 1), nrow = 2, byrow = TRUE)\n  list(train = train, test = test, box = box)\n}\n\nload(paste0(getwd(), \"/dsgc.RData\"))\n\naddProblem(name = \"dgps\", fun = syntdata, seed = 8632)\naddProblem(name = \"dsgc\", data = d, fun = simdata, seed = 8632)\n\nrm(d)\n\n\n#### algorithms\n\nconventional = function(data, job, instance, ...) {\n  res <- norm.prim(dtrain = instance$train, dtest = instance$test, box = instance$box,...)\n  append(res, list(NA, NA))\n}\n\nbagging = function(data, job, instance, ...) {\n  res <- bagging.prim(dtrain = instance$train, dtest = instance$test, box = instance$box,...)\n  append(res, list(NA, NA))\n}\n\nprimrf = function(data, job, instance, ngen, ...) {\n  res <- rf.prim(dtrain = instance$train, dtest = instance$test, box = instance$box, npts = ngen, ...)\n  res\n}\n\n\naddAlgorithm(name = \"normal\", fun = conventional)\naddAlgorithm(name = \"bagging\", fun = bagging)\naddAlgorithm(name = \"rfprim\", fun = primrf)\n\n\n#### check what is there\n\nreg$problems\nreg$algorithms\n\n#### add experiments\n\n# 1) functions\n\npdes = list(\n  dgps = CJ(npts = c(400, 800, 1600), \n            dgp = c(paste0(c(1:8)), \"10\", \"borehole\", \"ellipse\", \"hart3\", \"hart4\", \"hart6sc\",\n                    \"ishigami\", \"linketal06dec\", \"linketal06simple\", \"linketal06sin\",\n                    \"loepetal13\", \"moon10hd\", \"moon10hdc1\", \"moon10low\", \"morretal06\",\n                    \"morris\", \"oakoh04\", \"otlcircuit\", \"piston\", \"soblev99\",\n                    \"sobol\", \"welchetal92\", \"willetal06\", \"wingweight\"))\n\n)\n\nades = list(\n  normal = data.table(pasting = c(FALSE, TRUE)),\n  bagging = data.table(features = c(\"some\", \"all\")),\n  rfprim = data.table(ngen = 100000)\n)\n\naddExperiments(pdes, ades, repls = 50)\n\n# 2) simulations\n\npdes = list(\n  dsgc = CJ(npts = c(200, 400, 800, 1200, 1600, 2000), \n            ind = 1:50,\n            noise = 0)\n)\n\nades = list(\n  normal = data.table(pasting = c(FALSE, TRUE)),\n  bagging = data.table(features = c(\"some\", \"all\")),\n  rfprim = data.table(ngen = 100000)\n)\n\naddExperiments(pdes, ades, repls = 1)\n\n# 3) simlations different number of points labelled with rf\n\npdes = list(\n  dsgc = data.table(npts = 400, ind = 1:50, noise = 0)\n)\n\nades = list(\n  normal = data.table(pasting = c(FALSE, TRUE)),\n  bagging = data.table(features = c(\"some\", \"all\")),\n  rfprim = data.table(ngen = c(200, 400, 800, 1600, 3200, 6400, 25000, 100000))\n)\n\naddExperiments(pdes, ades, repls = 1)\n\n# 4) simlations different noise level\n\npdes = list(\n  dsgc = CJ(npts = 400,\n            ind = 1:50,\n            noise = c(0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5))\n)\n\nades = list(\n  normal = data.table(pasting = c(FALSE, TRUE)),\n  bagging = data.table(features = c(\"some\", \"all\")),\n  rfprim = data.table(ngen = 100000)\n)\n\naddExperiments(pdes, ades, repls = 1)\n\n\n#### check what is where\n\nsummarizeExperiments()\nunwrap(getJobPars())\n\n#### run experiments\n\nsubmitJobs()\nwaitForJobs()\n\n#### you may interrupt the excecution at any point and then do only remain experiments\n#### with the following code\n\n# ids <- findNotDone()\n# submitJobs(ids)\n# waitForJobs()\n",
    "created" : 1558525756125.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2528930649",
    "id" : "A002A23B",
    "lastKnownWriteTime" : 1555503648,
    "last_content_update" : 1558527045710,
    "path" : "C:/Users/arzamasov/Dropbox/CIKM_2019_anonymous_folder/Paper_3_experiments_final/do_experiments.R",
    "project_path" : "do_experiments.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}